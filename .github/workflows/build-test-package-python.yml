name: 'Build, Test, Package ITK Remote Module'

on:
  workflow_call:
    inputs:
      cmake-options:
        required: false
        type: string
        default: ""
      itk-wheel-tag:
        required: false
        type: string
        default: 'v5.3.0'
      itk-python-package-tag:
        required: false
        type: string
        default: 'f91b70fe5f97a095be8e20cff33be31a11b0b96e'
      itk-python-package-org:
        required: false
        type: string
        default: 'InsightSoftwareConsortium'
    secrets:
      pypi_password:
        required: false  # Packages will not be uploaded to PyPI if not set

jobs:
  build-linux-python-packages:
    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 2
      matrix:
        python-version: ["37", "38", "39", "310", "311"]

    steps:
    - uses: actions/checkout@v2

    - name: 'Free up disk space'
      run: |
        # Workaround for https://github.com/actions/virtual-environments/issues/709
        df -h
        sudo apt-get clean
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: 'Fetch build dependencies'
      shell: bash
      run: |
        sudo apt install zstd
        unzstd --version

    - name: 'Fetch build script'
      run: |
        IPP_DOWNLOAD_GIT_TAG=${{ inputs.itk-python-package-tag }}
        IPP_DOWNLOAD_ORG=${{ inputs.itk-python-package-org }}
        curl -L https://raw.githubusercontent.com/${IPP_DOWNLOAD_ORG:=InsightSoftwareConsortium}/ITKPythonPackage/${IPP_DOWNLOAD_GIT_TAG:=master}/scripts/dockcross-manylinux-download-cache-and-build-module-wheels.sh -O
        chmod u+x dockcross-manylinux-download-cache-and-build-module-wheels.sh

    - name: 'Build 🐍 Python 📦 package'
      shell: bash
      run: |
        export ITK_PACKAGE_VERSION=${{ inputs.itk-wheel-tag }}
        export ITKPYTHONPACKAGE_TAG=${{ inputs.itk-python-package-tag }}
        export ITKPYTHONPACKAGE_ORG=${{ inputs.itk-python-package-org }}
        if [ -z ${{ inputs.cmake-options }}]; then
          CMAKE_OPTIONS=""
        else
          CMAKE_OPTIONS="--cmake_options ${{ inputs.cmake-options }}"
        fi

        for manylinux_version in "_2_28" "2014"; do
          rm -rf ITKPythonPackage
          export MANYLINUX_VERSION=${manylinux_version}
          echo "Building for manylinux specialization ${MANYLINUX_VERSION}"
          ./dockcross-manylinux-download-cache-and-build-module-wheels.sh cp${{ matrix.python-version }} $CMAKE_OPTIONS
        done

    - name: Publish Python package as GitHub Artifact
      uses: actions/upload-artifact@v1
      with:
        name: LinuxWheel${{ matrix.python-version }}
        path: dist

  build-macos-python-packages:
    runs-on: macos-11
    strategy:
      max-parallel: 2

    steps:
    - uses: actions/checkout@v2

    - name: 'Specific XCode version'
      run: |
        sudo xcode-select -s "/Applications/Xcode_13.2.1.app"

    - name: Get specific version of CMake, Ninja
      uses: lukka/get-cmake@v3.22.2

    - name: 'Fetch build script'
      run: |
        IPP_DOWNLOAD_GIT_TAG=${{ inputs.itk-python-package-tag }}
        IPP_DOWNLOAD_ORG=${{ inputs.itk-python-package-org }}
        curl -L https://raw.githubusercontent.com/${IPP_DOWNLOAD_ORG:=InsightSoftwareConsortium}/ITKPythonPackage/${IPP_DOWNLOAD_GIT_TAG:=master}/scripts/macpython-download-cache-and-build-module-wheels.sh -O
        chmod u+x macpython-download-cache-and-build-module-wheels.sh

    - name: 'Build 🐍 Python 📦 package'
      shell: bash
      run: |
        export ITK_PACKAGE_VERSION=${{ inputs.itk-wheel-tag }}
        export ITKPYTHONPACKAGE_TAG=${{ inputs.itk-python-package-tag }}
        export ITKPYTHONPACKAGE_ORG=${{ inputs.itk-python-package-org }}
        export MACOSX_DEPLOYMENT_TARGET=10.9
        if [ -z ${{ inputs.cmake-options }}]; then
          CMAKE_OPTIONS=""
        else
          CMAKE_OPTIONS="--cmake_options ${{ inputs.cmake-options }}"
        fi
        ./macpython-download-cache-and-build-module-wheels.sh $CMAKE_OPTIONS

    - name: Publish Python package as GitHub Artifact
      uses: actions/upload-artifact@v1
      with:
        name: MacOSWheels
        path: dist

  build-windows-python-packages:
    runs-on: windows-2022
    strategy:
      max-parallel: 2
      matrix:
        python-version-minor: ["7", "8", "9", "10", "11"]

    steps:
    - name: Get specific version of CMake, Ninja
      uses: lukka/get-cmake@v3.22.2

    - uses: actions/checkout@v2
      with:
        path: "im"

    - name: 'Reduce source path length'
      shell: bash
      run: |
        # Move checked-out source to a shorter path to avoid Windows path length issues
        mv im ../../

    - name: 'Install Python'
      run: |
        $pythonArch = "64"
        $pythonVersion = "3.${{ matrix.python-version-minor }}"
        iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/scikit-build/scikit-ci-addons/master/windows/install-python.ps1'))

    - name: 'Fetch build dependencies'
      shell: bash
      run: |
        cd ../../
        curl -L "https://github.com/InsightSoftwareConsortium/ITKPythonBuilds/releases/download/${{ inputs.itk-wheel-tag }}/ITKPythonBuilds-windows.zip" -o "ITKPythonBuilds-windows.zip"
        7z x ITKPythonBuilds-windows.zip -o/c/P -aoa -r
        curl -L "https://data.kitware.com/api/v1/file/5c0ad59d8d777f2179dd3e9c/download" -o "doxygen-1.8.11.windows.bin.zip"
        7z x doxygen-1.8.11.windows.bin.zip -o/c/P/doxygen -aoa -r
        curl -L "https://data.kitware.com/api/v1/file/5bbf87ba8d777f06b91f27d6/download/grep-win.zip" -o "grep-win.zip"
        7z x grep-win.zip -o/c/P/grep -aoa -r

        if [[ -n ${{ inputs.itk-python-package-tag }} ]]; then
          echo "Updating ITKPythonPackage build scripts to ${{ inputs.itk-python-package-tag }}"
          pushd /c/P/IPP
          git remote add ${{ inputs.itk-python-package-org }} https://github.com/${{ inputs.itk-python-package-org }}/ITKPythonPackage.git --tags
          git fetch ${{ inputs.itk-python-package-org }}
          git checkout ${{ inputs.itk-python-package-tag }}
          git status
          popd
        else
          echo "Using ITKPythonPackage scripts included with ITKPythonBuilds archive"
        fi

    - name: 'Build 🐍 Python 📦 package'
      shell: cmd
      run: |
        cd ../../im
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set PATH=C:\P\grep;%PATH%
        set CC=cl.exe
        set CXX=cl.exe
        C:\Python3${{ matrix.python-version-minor }}-x64\python.exe C:\P\IPP\scripts\windows_build_module_wheels.py --py-envs "3${{ matrix.python-version-minor }}-x64" --no-cleanup

    - name: Publish Python package as GitHub Artifact
      uses: actions/upload-artifact@v1
      with:
        name: WindowsWheel3.${{ matrix.python-version-minor }}
        path: ../../im/dist

  publish-python-packages-to-pypi:
    needs:
      - build-linux-python-packages
      - build-macos-python-packages
      - build-windows-python-packages
    runs-on: ubuntu-20.04

    steps:
    - name: Download Python Packages
      uses: actions/download-artifact@v2

    - name: Prepare packages for upload
      run: |
        ls -R
        for d in */; do
          mv ${d}/*.whl .
        done
        mkdir dist
        mv *.whl dist/
        ls dist

    - name: Publish 🐍 Python 📦 package to PyPI
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@v1.5.1
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
